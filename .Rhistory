#WRITE YOUR CODE HERE
#WRITE YOUR CODE HERE
#WRITE YOUR CODE HERE
#WRITE YOUR CODE HERE
#WRITE YOUR CODE HERE
#WRITE YOUR CODE HERE
#WRITE YOUR CODE HERE
#WRITE YOUR CODE HERE
#WRITE YOUR CODE HERE
#WRITE YOUR CODE HERE
#WRITE YOUR CODE HERE
#WRITE YOUR CODE HERE
#WRITE YOUR CODE HERE
#WRITE YOUR CODE HERE
#WRITE YOUR CODE HERE
#WRITE YOUR CODE HERE
#WRITE YOUR CODE HERE
#WRITE YOUR CODE HERE
#WRITE YOUR CODE HERE
knitr::opts_chunk$set(echo = TRUE)
#creating a for loop to make different samples with vectors computing the variance
set.seed(123)
sample_vars = numeric(100)
for (i in 1:100) {
samples_movies = movies2[sample(nrow(movies2), 25),]
sample_vars[i] = var(samples_movies$profits, na.rm = T)
}
head(sample_vars)
#creating a for loop to make different samples with vectors computing the variance
set.seed(123)
sample_vars = numeric(100)
for (i in 1:100) {
samples_movies = movies2[sample(nrow(movies2), 25),]
sample_vars[i] = var(samples_movies$profits, na.rm = T)
}
head(sample_vars)
#computing the mean, standard deviation and plotting the histogram of the sample variances
summary(sample_vars, na.rm =T)
mean(sample_vars, na.rm = T)
sd(sample_vars, na.rm = T)
sample_vars = data.frame(sample_vars)
library(ggplot2)
ggplot(sample_vars, aes(x = sample_vars)) +
geom_histogram(binwidth = diff(range(sample_vars))/40, colour = "black", fill = "skyblue") +
labs(title = "Distribution of Sample Variances", x = "Sample Variances", y = "Count")
mean(sample_vars, na.rm = T)
mean(sample_vars)
#computing the mean, standard deviation and plotting the histogram of the sample variances
summary(sample_vars)
sd(sample_vars)
sample_vars[i] = var(samples_movies$profits, na.rm = T)
#creating a for loop to make different samples with vectors computing the variance
set.seed(123)
sample_vars = numeric(100)
for (i in 1:100) {
samples_movies = movies2[sample(nrow(movies2), 25),]
sample_vars[i] = var(samples_movies$profits, na.rm = T)
}
head(sample_vars)
#computing the mean, standard deviation and plotting the histogram of the sample variances
summary(sample_vars)
mean(sample_vars)
sd(sample_vars)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
movies2 = read_tsv("movies2.tsv")
#Here I am computing the number of observations, variables and subjects
ncol(movies2)
nrow(movies2)
#Here I am looking at the head of the dataset to determine whether the variables are nominal, ordinal, interval or ratio
head(movies2)
#Here I am making a new variable called profits
library(tidyr)
library(tidyverse)
movies2 = movies2 %>%
mutate(profits = revenue -budget)
#Here I am computing the minimum, maximum and mean values of the variable profits
summary(movies2$profits)
#Here I am making a seperate dataset with 1 variable and 1 observation to see which movie has the highest profits and how much it is.
max_profit_movie = movies2[which.max(movies2$profits), "title"]
print(max_profit_movie)
max_profit = max(movies2$profits)
#Here I am doing the same thing as above but then for the lowest profits
min_profit_movie = movies2[which.min(movies2$profits), "title"]
print(min_profit_movie)
min_profit = min(movies2$profits)
#Here I am dividing the profits into quartiles as I have to plot a boxplot
movies2$quartile = cut(movies2$profits, breaks = quantile(movies2$profits, probs = c(0, 0.25,0.5, 0.75, 1)), labels = c("Q1", "Q2", "Q3", "Q4"), include.lowest = T)
#Here I am plotting a boxplot for the profits with quartiles
library(ggplot2)
ggplot(movies2, aes(x = quartile, y = profits)) +
geom_boxplot() +
labs(title = "Boxplot of Movie Profits by Quartile", x = "Quartile", y = "Profits")
#Here I make a new variable with the log transformed profits
movies2 = movies2 %>%
mutate(log_profits = log(profits))
#Here I compute the mean but we were not sure to remove the NAs or not so in the first one we did not remove it and in the second we did to see if we would get different answers
mean(movies2$log_profits)
mean(movies2$log_profits, na.rm = T)
#Here I put NA instead of the profits that are negative or equal to 0, then I used the same code as before to calculate the logs and then I calculated the mean of the logs of the profits again.
movies2$profits = ifelse(movies2$profits <= 0 , NA, movies2$profits)
movies2 = movies2 %>%
mutate(log_profits = log(profits))
mean(movies2$log_profits, na.rm = T)
#As I have to make a boxplot, I first divided the logs into quartiles
movies2$quartiles = cut(movies2$log_profits, breaks = quantile(movies2$log_profits, probs = c(0, 0.25,0.5, 0.75, 1), na.rm = T), labels = c("Q1", "Q2", "Q3", "Q4"), include.lowest = T)
# Here I am plotting the boxplot with the log transformed profits with quartiles
ggplot(movies2, aes(x = quartiles, y = log_profits)) +
geom_boxplot() +
labs(title = "Boxplot of Movies Log Transformed Profits", x = "Quartiles", y = "Log of Profits")
#Here I plot a scatterplot with runtime on x-axis and on the y-axis the vote average
ggplot(movies2, aes(x = runtime, y = vote_average)) +
geom_point() +
labs(title = "Scatterplot Movies Average Voting and Runtime", x = "runtime", y = "average voting")
#looking for the actor with the most movies
library(dplyr)
actor = movies2 %>%
count(first_actor, sort = T) %>%
head(1)
print(actor)
#computing the average revenue of Bruce
average_rev_Bruce = movies2 %>%
filter(first_actor == "Bruce Willis") %>%
summarise(av_rev_Bruce = mean(revenue))
print(average_rev_Bruce)
#computing the average revenue general
average_rev_generally = movies2 %>%
summarise(rev_gen = mean(revenue))
print(average_rev_generally)
#computing the varience of the subset Bruce of the revenue and the general variance of the full dataset
library(tidyverse)
var_bruce = movies2 %>%
filter(first_actor == "Bruce Willis") %>%
summarise(var_bruce = var(revenue))
print(var_bruce)
var_gen = movies2 %>%
summarise(var_gen = var(revenue))
print(var_gen)
#recoding profits into millions and calculating the variance of the mean
movies2$profits = movies2$profits/1000000
library(tidyverse)
var_profits2 = var(movies2$profits, na.rm = T)
print(var_profits2)
#creation of a sample of 25 movies, new data set and computing the variance of this sample
set.seed(123)
movies_sample = movies2[sample(nrow(movies2), 25),]
var_sample_profits = var(movies_sample$profits, na.rm =T)
print(var_sample_profits)
#creating a for loop to make different samples with vectors computing the variance
set.seed(123)
sample_vars = numeric(100)
for (i in 1:100) {
samples_movies = movies2[sample(nrow(movies2), 25),]
sample_vars[i] = var(samples_movies$profits, na.rm = T)
}
head(sample_vars)
#computing the mean, standard deviation and plotting the histogram of the sample variances
summary(sample_vars)
mean(sample_vars)
sd(sample_vars)
sample_vars = data.frame(sample_vars)
library(ggplot2)
ggplot(sample_vars, aes(x = sample_vars)) +
geom_histogram(binwidth = diff(range(sample_vars))/40, colour = "black", fill = "skyblue") +
labs(title = "Distribution of Sample Variances", x = "Sample Variances", y = "Count")
#WRITE YOUR CODE HERE
thriller = movies2 %>%
filter(genre == "Thriller")
N<-length(thriller$runtime)
mean_runtime <- mean(thriller$runtime)
sd_runtime   <- sd(thriller$runtime)
t_a2 <- qt(0.995, df = N - 1)
LOW <- mean_runtime - t_a2 * (sd_runtime/ sqrt(N))
UP  <- mean_runtime + t_a2 * (sd_runtime/ sqrt(N))
CI<-paste0("(",round(LOW,4),",",round(UP,4),")")
print(CI)
#WRITE YOUR CODE HERE
N<-length(thriller$runtime)
mean_runtime <- mean(thriller$runtime)
sd_runtime   <- sd(thriller$runtime)
z_a2 <- qnorm(0.995)
LOW <- mean_runtime - z_a2 * (sd_runtime/ sqrt(N))
UP  <- mean_runtime + z_a2 * (sd_runtime/ sqrt(N))
CI<-paste0("(",round(LOW,4),",",round(UP,4),")")
print(CI)
#WRITE YOUR CODE HERE
s2 <- var(movies2$runtime)
sigma_sq <- 500
chi2_stat <- (N - 1) * s2 / sigma_sq
alpha <- 0.05
chi2_L <- qchisq(alpha/2, df = N-1)
chi2_U <- qchisq(1 - alpha/2, df = N-1)
#WRITE YOUR CODE HERE
ggplot(movies2, aes(x = revenue)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
labs(title = "Histogram of Revenue", x = "Revenue", y = "Count") +
theme_minimal()
#WRITE YOUR CODE HERE
movies2 <- movies2 %>%
mutate(vote_average_rounded = floor(vote_average))
# Histogram met ggplot2
ggplot(movies2, aes(x = vote_average_rounded)) +
geom_histogram(binwidth = 1, fill = "lightblue", color = "black") +
labs(title = "Histogram vote average",
x = "rounded voting average",
y = "frequency") +
scale_x_continuous(breaks = seq(1, 10, 1))
#WRITE YOUR CODE HERE
movies2 <- movies2 %>%
mutate(vote_average_rounded = floor(vote_average))
View(movies2)
#WRITE YOUR CODE HERE
movies2 <- movies2 %>%
mutate(vote_average_rounded = floor(vote_average))
# Histogram met ggplot2
ggplot(movies2, aes(x = vote_average_rounded)) +
geom_histogram(binwidth = 1, fill = "lightblue", color = "black") +
labs(title = "Histogram vote average",
x = "rounded voting average",
y = "frequency") +
scale_x_continuous(breaks = seq(1, 10, 1))
mean_profits_plot = movies2 %>%
group_by(vote_average_rounded) %>%
summarise(mean_profit = mean(profits, na.rm = T))
View(mean_profits_plot)
ggplot(mean_profits_plot, aes(x = vote_average_rounded, y = mean_profit)) +
geom_point()+
labs(title = "Vote Rate vs Mean Profits", x = "Average Vote Rate", y = "Mean Profits")
#new sub data set with yearly mean profits and 95% confidence interval.
yearly_profits = movies2 %>%
group_by(release_year) %>%
summarise(mean_profit = mean(profits, na.rm = T),
n = sum(!is.na(profits)),
se = sd(profit, na.rm = T)/ sqrt(n),
lower_ci = mean_profit - qt(0.975, movies2 = n -1) * se,
upper_ci = mean_profit + qt(0.975, movies2 = n-1) * se)
#new sub data set with yearly mean profits and 95% confidence interval.
yearly_profits = movies2 %>%
group_by(release_year) %>%
summarise(mean_profit = mean(profits, na.rm = T),
n = sum(!is.na(profits)),
se = sd(profits, na.rm = T)/ sqrt(n),
lower_ci = mean_profit - qt(0.975, movies2 = n -1) * se,
upper_ci = mean_profit + qt(0.975, movies2 = n-1) * se)
#new sub data set with yearly mean profits and 95% confidence interval.
yearly_profits = movies2 %>%
group_by(release_year) %>%
summarise(mean_profit = mean(profits, na.rm = T),
n = sum(!is.na(profits)),
se = sd(profits, na.rm = T)/ sqrt(n),
lower_ci = mean_profit - qt(0.975, movies2 = n - 1) * se,
upper_ci = mean_profit + qt(0.975, movies2 = n-1) * se)
#new sub data set with yearly mean profits and 95% confidence interval.
yearly_profits = movies2 %>%
group_by(release_year) %>%
summarise(mean_profit = mean(profits, na.rm = T),
n = sum(!is.na(profits)),
se = sd(profits, na.rm = T)/ sqrt(n),
lower_ci = mean_profit - qt(0.975, df = n - 1) * se,
upper_ci = mean_profit + qt(0.975, df = n-1) * se)
View(yearly_profits)
ggplot(yearly_profits, aes(x  = release_year, y = mean_profit)) +
geom_point()+
geom_errorbar(aes(ymin = lower_ci, ymax = upper_ci), width = 0.2) +
labs(title = "Mean Profits by Year with 95% CI", x = "Year", y = "Mean Profits")
ggplot(yearly_profits, aes(x  = release_year, y = mean_profit)) +
geom_point()+
geom_errorbar(aes(ymin = lower_ci, ymax = upper_ci), width = 0.2) +
labs(title = "Mean Profits by Year with 95% CI", x = "Year", y = "Mean Profits (X 1000")
ggplot(yearly_profits, aes(x  = release_year, y = mean_profit)) +
geom_point()+
geom_errorbar(aes(ymin = lower_ci, ymax = upper_ci), width = 0.2) +
labs(title = "Mean Profits by Year with 95% CI", x = "Year", y = "Mean Profits (X 1000)")
ggplot(yearly_profits, aes(x  = release_year, y = mean_profit)) +
geom_point()+
geom_errorbar(aes(ymin = lower_ci, ymax = upper_ci), width = 0.2) +
labs(title = "Mean Profits by Year with 95% CI", x = "Year", y = "Mean Profits (X 1000 )")
ggplot(yearly_profits, aes(x  = release_year, y = mean_profit)) +
geom_point()+
geom_errorbar(aes(ymin = lower_ci, ymax = upper_ci), width = 0.2) +
labs(title = "Mean Profits by Year with 95% CI", x = "Year", y = "Mean Profits (X 1000)")
knitr::opts_chunk$set(echo = TRUE)
library(readr)
movies2 = read_tsv("movies2.tsv")
#Here I am computing the number of observations, variables and subjects
ncol(movies2)
nrow(movies2)
#Here I am looking at the head of the dataset to determine whether the variables are nominal, ordinal, interval or ratio
head(movies2)
#Here I am making a new variable called profits
library(tidyr)
library(tidyverse)
movies2 = movies2 %>%
mutate(profits = revenue -budget)
#Here I am computing the minimum, maximum and mean values of the variable profits
summary(movies2$profits)
#Here I am making a seperate dataset with 1 variable and 1 observation to see which movie has the highest profits and how much it is.
max_profit_movie = movies2[which.max(movies2$profits), "title"]
print(max_profit_movie)
max_profit = max(movies2$profits)
#Here I am doing the same thing as above but then for the lowest profits
min_profit_movie = movies2[which.min(movies2$profits), "title"]
print(min_profit_movie)
min_profit = min(movies2$profits)
#Here I am dividing the profits into quartiles as I have to plot a boxplot
movies2$quartile = cut(movies2$profits, breaks = quantile(movies2$profits, probs = c(0, 0.25,0.5, 0.75, 1)), labels = c("Q1", "Q2", "Q3", "Q4"), include.lowest = T)
#Here I am plotting a boxplot for the profits with quartiles
library(ggplot2)
ggplot(movies2, aes(x = quartile, y = profits)) +
geom_boxplot() +
labs(title = "Boxplot of Movie Profits by Quartile", x = "Quartile", y = "Profits")
#Here I make a new variable with the log transformed profits
movies2 = movies2 %>%
mutate(log_profits = log(profits))
#Here I compute the mean but we were not sure to remove the NAs or not so in the first one we did not remove it and in the second we did to see if we would get different answers
mean(movies2$log_profits)
mean(movies2$log_profits, na.rm = T)
#Here I put NA instead of the profits that are negative or equal to 0, then I used the same code as before to calculate the logs and then I calculated the mean of the logs of the profits again.
movies2$profits = ifelse(movies2$profits <= 0 , NA, movies2$profits)
movies2 = movies2 %>%
mutate(log_profits = log(profits))
mean(movies2$log_profits, na.rm = T)
#As I have to make a boxplot, I first divided the logs into quartiles
movies2$quartiles = cut(movies2$log_profits, breaks = quantile(movies2$log_profits, probs = c(0, 0.25,0.5, 0.75, 1), na.rm = T), labels = c("Q1", "Q2", "Q3", "Q4"), include.lowest = T)
# Here I am plotting the boxplot with the log transformed profits with quartiles
ggplot(movies2, aes(x = quartiles, y = log_profits)) +
geom_boxplot() +
labs(title = "Boxplot of Movies Log Transformed Profits", x = "Quartiles", y = "Log of Profits")
#Here I plot a scatterplot with runtime on x-axis and on the y-axis the vote average
ggplot(movies2, aes(x = runtime, y = vote_average)) +
geom_point() +
labs(title = "Scatterplot Movies Average Voting and Runtime", x = "runtime", y = "average voting")
#looking for the actor with the most movies
library(dplyr)
actor = movies2 %>%
count(first_actor, sort = T) %>%
head(1)
print(actor)
#computing the average revenue of Bruce
average_rev_Bruce = movies2 %>%
filter(first_actor == "Bruce Willis") %>%
summarise(av_rev_Bruce = mean(revenue))
print(average_rev_Bruce)
#computing the average revenue general
average_rev_generally = movies2 %>%
summarise(rev_gen = mean(revenue))
print(average_rev_generally)
#computing the varience of the subset Bruce of the revenue and the general variance of the full dataset
library(tidyverse)
var_bruce = movies2 %>%
filter(first_actor == "Bruce Willis") %>%
summarise(var_bruce = var(revenue))
print(var_bruce)
var_gen = movies2 %>%
summarise(var_gen = var(revenue))
print(var_gen)
#recoding profits into millions and calculating the variance of the mean
movies2$profits = movies2$profits/1000000
library(tidyverse)
var_profits2 = var(movies2$profits, na.rm = T)
print(var_profits2)
#creation of a sample of 25 movies, new data set and computing the variance of this sample
set.seed(123)
movies_sample = movies2[sample(nrow(movies2), 25),]
var_sample_profits = var(movies_sample$profits, na.rm =T)
print(var_sample_profits)
#creating a for loop to make different samples with vectors computing the variance
set.seed(123)
sample_vars = numeric(100)
for (i in 1:100) {
samples_movies = movies2[sample(nrow(movies2), 25),]
sample_vars[i] = var(samples_movies$profits, na.rm = T)
}
head(sample_vars)
#computing the mean, standard deviation and plotting the histogram of the sample variances
summary(sample_vars)
mean(sample_vars)
sd(sample_vars)
sample_vars = data.frame(sample_vars)
library(ggplot2)
ggplot(sample_vars, aes(x = sample_vars)) +
geom_histogram(binwidth = diff(range(sample_vars))/40, colour = "black", fill = "skyblue") +
labs(title = "Distribution of Sample Variances", x = "Sample Variances", y = "Count")
#WRITE YOUR CODE HERE
thriller = movies2 %>%
filter(genre == "Thriller")
N<-length(thriller$runtime)
mean_runtime <- mean(thriller$runtime)
sd_runtime   <- sd(thriller$runtime)
t_a2 <- qt(0.995, df = N - 1)
LOW <- mean_runtime - t_a2 * (sd_runtime/ sqrt(N))
UP  <- mean_runtime + t_a2 * (sd_runtime/ sqrt(N))
CI<-paste0("(",round(LOW,4),",",round(UP,4),")")
print(CI)
#WRITE YOUR CODE HERE
N<-length(thriller$runtime)
mean_runtime <- mean(thriller$runtime)
sd_runtime   <- sd(thriller$runtime)
z_a2 <- qnorm(0.995)
LOW <- mean_runtime - z_a2 * (sd_runtime/ sqrt(N))
UP  <- mean_runtime + z_a2 * (sd_runtime/ sqrt(N))
CI<-paste0("(",round(LOW,4),",",round(UP,4),")")
print(CI)
#WRITE YOUR CODE HERE
s2 <- var(movies2$runtime)
sigma_sq <- 500
chi2_stat <- (N - 1) * s2 / sigma_sq
alpha <- 0.05
chi2_L <- qchisq(alpha/2, df = N-1)
chi2_U <- qchisq(1 - alpha/2, df = N-1)
#WRITE YOUR CODE HERE
ggplot(movies2, aes(x = revenue)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
labs(title = "Histogram of Revenue", x = "Revenue", y = "Count") +
theme_minimal()
#WRITE YOUR CODE HERE
movies2 <- movies2 %>%
mutate(vote_average_rounded = floor(vote_average))
# Histogram met ggplot2
ggplot(movies2, aes(x = vote_average_rounded)) +
geom_histogram(binwidth = 1, fill = "lightblue", color = "black") +
labs(title = "Histogram vote average",
x = "rounded voting average",
y = "frequency") +
scale_x_continuous(breaks = seq(1, 10, 1))
#calculting mean profits per category and plotting scatterplot
mean_profits_plot = movies2 %>%
group_by(vote_average_rounded) %>%
summarise(mean_profit = mean(profits, na.rm = T))
ggplot(mean_profits_plot, aes(x = vote_average_rounded, y = mean_profit)) +
geom_point()+
labs(title = "Vote Rate vs Mean Profits", x = "Average Vote Rate Rounded", y = "Mean Profits")
#new sub data set with yearly mean profits and 95% confidence interval.
yearly_profits = movies2 %>%
group_by(release_year) %>%
summarise(mean_profit = mean(profits, na.rm = T),
n = sum(!is.na(profits)),
se = sd(profits, na.rm = T)/ sqrt(n),
lower_ci = mean_profit - qt(0.975, df = n - 1) * se,
upper_ci = mean_profit + qt(0.975, df = n-1) * se)
ggplot(yearly_profits, aes(x  = release_year, y = mean_profit)) +
geom_point()+
geom_errorbar(aes(ymin = lower_ci, ymax = upper_ci), width = 0.2) +
labs(title = "Mean Profits by Year with 95% CI", x = "Year", y = "Mean Profits (X 1000)")
View(movies2)
#WRITE YOUR CODE HERE
lm(profits ~ budget, data = movies2)
summary(model)
#WRITE YOUR CODE HERE
model = lm(profits ~ budget, data = movies2)
summary(model)
#WRITE YOUR CODE HERE
summary(model)
#WRITE YOUR CODE HERE
summary(model)
movies2 = movies2 %>%
mutate(log_budget = log(budget))
movies2 = movies2 %>%
mutate(log_budget = ifelse(is.infinite(log_budget), NA_real, log_budget))
movies2 = movies2 %>%
mutate(log_budget = ifelse(is.infinite(log_budget), NA_real_, log_budget))
movies2 = movies2%>%
mutate(budget = ifelse(budget == 0, NA_real_, budget))
movies2 = movies2 %>%
mutate(log_budget = log(budget))
movies2 = movies2 %>%
mutate(log_budget = ifelse(is.infinite(log_budget), NA_real_, log_budget))
model_new = lm(log_profits ~ log_budget, data = movies2)
summary(model_new)
#WRITE YOUR CODE HERE
summary(model_new)
#WRITE YOUR CODE HERE
summary(model)
summary(model_new)
#WRITE YOUR CODE HERE
plot_log = movies2%>%
group_by(first_actor_gender) %>%
summarise(mean_log_budget = mean(log_budget, na.rm = T),
se = sd(log_budget, na.rm = T)/sqrt(n()),
low_ci = mean_log_budget - 1.96 * se,
up_ci = mean_log_budget + 1.96 * se)
View(plot_log)
ggplot(plot_log, aes(x = first_actor_gender, y = mean_log_budget)) +
geom_point()+
geom_errorbar(aes(ymin = low_ci, ymax = up_ci), width = 0.2)+
labs(title = "Mean Log of Budgets by First Actor Gender", y = "Mean Log of Budget", x = "First Actor Gender")
#WRITE YOUR CODE HERE
plot_log = movies2%>%
group_by(first_actor_gender) %>%
summarise(mean_log_budget = mean(log_budget, na.rm = T),
se = sd(log_budget, na.rm = T)/sqrt(n()),
low_ci = mean_log_budget - 1.96 * se,
up_ci = mean_log_budget + 1.96 * se)
ggplot(plot_log, aes(x = first_actor_gender, y = mean_log_budget)) +
geom_point()+
geom_errorbar(aes(ymin = low_ci, ymax = up_ci), width = 0.2)+
labs(title = "Mean Log of Budgets by First Actor Gender", y = "Mean Log of Budget", x = "First Actor Gender")
#WRITE YOUR CODE HERE
plot_log = movies2%>%
filter(!is.na(first_actor_gender))%>%
group_by(first_actor_gender) %>%
summarise(mean_log_budget = mean(log_budget, na.rm = T),
se = sd(log_budget, na.rm = T)/sqrt(n()),
low_ci = mean_log_budget - 1.96 * se,
up_ci = mean_log_budget + 1.96 * se)
ggplot(plot_log, aes(x = first_actor_gender, y = mean_log_budget)) +
geom_point()+
geom_errorbar(aes(ymin = low_ci, ymax = up_ci), width = 0.2)+
labs(title = "Mean Log of Budgets by First Actor Gender", y = "Mean Log of Budget", x = "First Actor Gender")
#WRITE YOUR CODE HERE
ols_model = lm(log_budget ~ first_actor_gender, data = movies2)
summary(ols_model)
